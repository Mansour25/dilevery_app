import 'package:dilevery_app/controller/home/details_order_controller.dart';import 'package:dilevery_app/core/constant/AppLink.dart';import 'package:dilevery_app/core/functions/printing.dart';import 'package:dilevery_app/core/functions/status_request.dart';import 'package:dilevery_app/core/model/ItemModel.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';class DetailsOrderScreen extends StatelessWidget {  const DetailsOrderScreen({Key? key}) : super(key: key);  @override  Widget build(BuildContext context) {    Get.lazyPut(() => DetailsOrderController());    return GetBuilder<DetailsOrderController>(builder: (logic) {      return Scaffold(        appBar: AppBar(          backgroundColor: Colors.black,          elevation: 0,        ),        body: (logic.statusRequest == StatusRequest.success)            ? Container(                width: double.infinity,                child: Padding(                  padding: const EdgeInsets.all(8.0),                  child: Card(                    child: Column(                      children: [                        SizedBox(                            height: 120,                            width: 120,                            child: PageView.builder(                              itemCount: logic.items.length,                              itemBuilder: (context, index) {                                space_print(                                    '${AppLink.image_items}/${logic.items[index].itemImage!}');                                return SizedBox(                                  width: 200,                                  height: 200,                                  child: Image.network(                                      '${AppLink.image_items}/${logic.items[index].itemImage!}'),                                );                              },                            )),                        SizedBox(                          height: 20,                        ),                        Text(                          'Item Count : ${logic.items.length}',                          style: TextStyle(                            fontSize: 16,                            fontWeight: FontWeight.w500,                          ),                        ),                        Text(                          'Order Id : ${logic.order!.orderId}',                          style: TextStyle(                            fontSize: 16,                            fontWeight: FontWeight.w500,                          ),                        ),                        Text(                          'Address Name : ${logic.address!.addressName}',                          style: TextStyle(                            fontSize: 16,                            fontWeight: FontWeight.w500,                          ),                        ),                        Text(                          'Address Street : ${logic.address!.addressStreet}',                          style: TextStyle(                            fontSize: 16,                            fontWeight: FontWeight.w500,                          ),                        ),                        Text(                          'Address City : ${logic.address!.addressCity}',                          style: TextStyle(                            fontSize: 16,                            fontWeight: FontWeight.w500,                          ),                        ),                        SizedBox(                          height: 20,                        ),                        (logic.lat != null && logic.long != null)                            ? Expanded(                                child: Container(                                  // width: double.infinity,                                  // height: 300,                                  decoration: BoxDecoration(                                    borderRadius: BorderRadius.circular(40),                                  ),                                  child: GoogleMap(                                    markers: logic.myMarker,                                    scrollGesturesEnabled: true,                                    mapType: MapType.satellite,                                    initialCameraPosition: CameraPosition(                                      target: LatLng(                                        double.parse(logic.lat!),                                        double.parse(logic.long!),                                      ),                                      zoom: 16.41,                                    ),                                    onMapCreated:                                        (GoogleMapController controller) {                                      logic.controller.complete(controller);                                    },                                    //  onCameraMove: (CameraPosition position) {                                    // },                                  ),                                ),                              )                            : Container(                                width: 300,                                height: 300,                                child: Center(                                  child: CircularProgressIndicator(),                                ),                              ),                      ],                    ),                  ),                ),              )            : Center(                child: CircularProgressIndicator(),              ),      );    });  }}